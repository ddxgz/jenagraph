{"content":[{"key":"3a8448262e013b672c9b72fe896c7860","postAt":"2017-09-20T09:48:15Z","modifiedAt":"2017-09-25T22:56:43+08:00","title":"Nginx 源代码笔记 - 配置变量","url":"http://ialloc.org/posts/2013/10/20/ngx-notes-http-variables/","DescriptionOld":"","description":"Notice: 这篇文章写得较烂，做好心理准备。It's a mess, and you've been warned.\n\nNginx 核心模块和第三方模块提供了很多变量。通过这些变量的值，我们可以得知请求相关 的数据 ($request_uri, $arg_name, $remote_addr)、请求状态 ($bytes_sent)或 者根据请求的属性调用不同的处理逻辑 (if ($uri == \"xxx\")) 等等。\n\n变量让 Nginx 配置有了更大的灵活性，这篇主要分析一下 Nginx 是如何实现变量特性的。","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"nginx","label":"Nginx"}],"creators":[{"creatorID":"ialloc.org","label":"ialloc.org","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"},{"key":"8c875c419127546103169297d96fef71","postAt":"2017-09-24T16:31:18Z","modifiedAt":"2017-09-25T17:53:43+08:00","title":"Understanding Asyncio","url":"https://medium.com/@philip.graham.jones/understanding-asyncio-a6592a517def","DescriptionOld":"","description":"A recent article by Jason Goldstein expressed the author’s difficulty understanding and using Asyncio, especially in a Flask context. Asyncio in a Flask context is the exact experience I have with Quart, so I hope I can add something to the conversation this author started.\n\nAsyncio provides another tool for concurrent programming in Python, that is more lightweight than threads or multiprocessing. In a very simple sense it does this by having an event loop execute a collection of tasks, with a key difference being that each task chooses when to yield control back to the event loop.\n\nWith Asyncio the yield must be explicitly coded, by using the await keyword to await something that is asynchronous from within something that is asynchronous. Additionally anything that is asynchronous must also be explicitly marked as such, using the async keyword. This causes an immediate headache as most existing code does not do this, and hence Asyncio does not work with this code. It then causes a second headache in that now everything bar the main function must be asynchronous if anything is asynchronous.","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"eninfos"}],"tags":[{"tagID":"python","label":"Python"},{"tagID":"asyncio","label":"AsyncIO"}],"creators":[{"creatorID":"philip-jones","label":"Philip Jones","domain":"","rss":"","atom":"","Sites":[]}],"language":"en"},{"key":"2aca2543b0e4409309f742b65d2ff7f5","postAt":"2017-09-24T16:32:56Z","modifiedAt":"2017-09-25T12:50:43+08:00","title":"偷天换日术-Web应用中的缓存技术漫谈","url":"http://www.jianshu.com/p/254a2aa295e4","DescriptionOld":"","description":"广义的来说, 我们将凡是位于速度相差较大的两种(硬件或者服务)之间，用于协调两者数据传输速度差异的[结构或者服务]，均可称之为缓存. 缓存属于典型的用空间换时间的方法, \n\n我们继续上一章的故事, 小白同学受到了我的感召, 开始了共享书吧的创业项目, 并且写出了第一版的程序上线运行了, 因为还没有拿到任何投资, 所以小白同学很苦逼的每月剩下了外出和小伙伴们吃烧烤的200元钱租了XX云的虚拟主机, 开始运营项目. 由于小伙伴们都很捧场, 业务飞速的发展了起来, 很快就有小伙伴来抱怨, 页面打开越来越慢, 有时候点一个按钮要反应好一会儿.\n\n作者：真压力很大同志\n链接：http://www.jianshu.com/p/254a2aa295e4\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"web","label":"Web"},{"tagID":"cache","label":"Cache"}],"creators":[{"creatorID":"真压力很大同志","label":"真压力很大同志","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"},{"key":"cda0558469acdf6c5ccec5978d890bff","postAt":"2017-09-24T16:32:18Z","modifiedAt":"2017-09-25T07:47:43+08:00","title":"Golang: Don’t afraid of makefiles","url":"https://sohlich.github.io/post/go_makefile/","DescriptionOld":"","description":"I’m using Golang for a while. During the development, I was used to repeatedly execute “go build”,“go test” manually. This was a bad habit on which I resign. It is not so painful if you use simple command without any args. But in case of more complex tasks, naturally, it is going to be a pain. There are few options you can consider as a way out. You can use a bash script to do the work for you. Or better, at least for me, you can write a makefile. The make tool is there for this reason and in the makefile you can keep all your common tasks together. I’m not “make tool guru” to be able to educate how to write the proper one, but in this post, I put together the makefile which works for most of my projects. Let’s go through it.","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"eninfos"}],"tags":[{"tagID":"golang","label":"Golang"},{"tagID":"makefile","label":"makefile"}],"creators":[{"creatorID":"radomir-sohlich","label":" Radomir Sohlich","domain":"","rss":"","atom":"","Sites":[]}],"language":"en"},{"key":"d8ae667abcba8a288d71ef769c0e02fe","postAt":"2017-09-20T09:47:59Z","modifiedAt":"2017-09-24T21:41:43+08:00","title":"Nginx 源代码笔记 - HTTP 模块 - echo [1]","url":"http://ialloc.org/posts/2014/01/10/ngx-notes-module-http-echo-1/","DescriptionOld":"","description":"echo 是个很有意思，也相当有用模块。能把编程语言的特性引入 Nginx 配置文件， 作者的想像力很是丰富！\n\n本篇来先来分析一下 echo 模块的总体框架和大致流程。 下一篇：细节篇 分另解析 一下此模块用到的各种 Nginx 知识点。","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"http","label":"HTTP"},{"tagID":"nginx","label":"Nginx"}],"creators":[{"creatorID":"ialloc.org","label":"ialloc.org","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"},{"key":"68f926f5179b3c1fc9c70aa80852b849","postAt":"2017-09-13T16:06:57Z","modifiedAt":"2017-09-24T16:38:43+08:00","title":"Shell 脚本中的数组","url":"http://smilejay.com/2016/04/array-in-bash/","DescriptionOld":"","description":"（本来7年前就开始写过Shell脚本，不过最近写一段bash脚本时，感觉要用下数组，忽然发现不知道一些语法细节，所以记录一下吧）\n在Shell中（我这里是Bash），其实没有传统意义上的“数据类型”，把任何变量中存的值都是作为字符组成的“字符串”。当然，通过declare可以声明某个变量是整型、数组等类型。其中，数组就是本文要专门讲的了。在Bash中，仅支持一维数组，当然通过关联数组（associative array）的形式可以模拟多维数组。","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"shell","label":"Shell"}],"creators":[{"creatorID":"笑遍世界","label":"笑遍世界","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"},{"key":"fb3493ca596d0ba51cc8bd4503fa7203","postAt":"2017-09-13T16:14:13Z","modifiedAt":"2017-09-24T11:35:43+08:00","title":"Leveraging Interfaces in Golang - Part 2","url":"http://blog.tamizhvendan.in/blog/2017/07/03/leveraging-interfaces-in-golang-part-2/","DescriptionOld":"","description":"In my previous blog post, we have seen how interfaces in golang can help us to come up with a cleaner design. In this blog post, we are going to see an another interesting use case of applying golang’s interfaces in creating adapters!\nSome Context\n\nIn my current project, we are using Postgres for persisting the application data. To make our life easier, we are using gorm to talk to Postgres from our golang code. Things were going well and we started rolling out new features without any challenges. One beautiful day, we came across an interesting requirement which gave us a run for the money.\n\nThe requirement is to store and retrieve an array of strings from Postgres!","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"eninfos"}],"tags":[{"tagID":"golang","label":"Golang"},{"tagID":"interface","label":"Interface"}],"creators":[{"creatorID":"tamizhvendan-s","label":"TamizhVendan S","domain":"","rss":"","atom":"","Sites":[]}],"language":"en"},{"key":"10b22c42253ccb7368d5cdb4fcedd481","postAt":"2017-09-19T17:53:13Z","modifiedAt":"2017-09-24T06:32:43+08:00","title":"五分钟带你入门 TensorFlow","url":"http://www.jianshu.com/p/2ea7a0632239","DescriptionOld":"","description":"本文是《人人都能学人工智能-TensorFlow系列》文章的第一篇，这个系列会对TensorFlow的基础使用，SoftMax，交叉熵，Dropout，CNN，LSTM和NLP等内容进行系列介绍，尽量使用通俗的语言，让更多的人都能了解人工智能，了解TensorFlow。\n\nTensorFlow是Google开源的一款人工智能学习系统。为什么叫这个名字呢？Tensor的意思是张量，代表N维数组；Flow的意思是流，代表基于数据流图的计算。把N维数字从流图的一端流动到另一端的过程，就是人工智能神经网络进行分析和处理的过程。\n\n话说在Android占领了移动端后，Google开源了TensorFlow，希望占领AI端。TF的特点是可以支持多种设备，大到GPU、CPU，小到平板和手机都可以跑起来TF。而且TF的使用很方便，几行代码就能开始跑模型，这让神经网络的入门变得非常简单。\n","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"tensorflow","label":"TensorFlow"}],"creators":[{"creatorID":"多隆笔记","label":"多隆笔记","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"},{"key":"97134aedfcf6311fd6ee03a04cb03695","postAt":"2017-09-19T17:53:56Z","modifiedAt":"2017-09-24T01:29:42+08:00","title":"HTML Templates via JavaScript Template Literals","url":"https://css-tricks.com/html-templates-via-javascript-template-literals/","DescriptionOld":"","description":"You know those super cool backticks-for-strings in new JavaScript?  That doesn't look overly different than JSX does it?! Maybe we'd do something like that as a React component:","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"eninfos"}],"tags":[{"tagID":"javascript","label":"Javascript"},{"tagID":"css","label":"CSS"},{"tagID":"frontend","label":"Front end"},{"tagID":"html","label":"HTML"}],"creators":[{"creatorID":"chris-coyier","label":"Chris Coyier","domain":"","rss":"","atom":"","Sites":[]}],"language":"en"},{"key":"6a69ea46393363837df11117dd1b686a","postAt":"2017-09-19T17:52:36Z","modifiedAt":"2017-09-23T20:26:42+08:00","title":"Golang动手写一个Http Proxy","url":"http://yangxikun.github.io/http/2017/09/16/http-proxy.html","DescriptionOld":"","description":"本文主要使用Golang实现一个可用但不够标准，支持basic authentication的http代理服务。Http 请求的代理如下图，Http Proxy只需要将接收到的请求转发给服务器，然后把服务器的响应，转发给客户端即可。","poster":"LinkedInfo","inAggregations":[{"aggregationID":"publishedinfos"},{"aggregationID":"encnaggr"},{"aggregationID":"cninfos"}],"tags":[{"tagID":"http","label":"HTTP"},{"tagID":"golang","label":"Golang"},{"tagID":"proxy","label":"Proxy"}],"creators":[{"creatorID":"rokety-yang","label":"Rokety Yang","domain":"","rss":"","atom":"","Sites":[]}],"language":"cn"}],"rel_self":"/infos?offset=0","rel_prev":"/infos?offset=-10","rel_next":"/infos?offset=10","per_page":10,"quantity":1370,"offset":0}